#include <iostream>
#include <Windows.h>
#include <thread>
#include <random>
#include <ctime>
#include <functional>
#include <string>
#include <cstdio>

const int C_H = 24,
C_W = 119,
C_S = C_W * C_H;

char mask[24][119] = {
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"000000000.....000.......00000....000.....000..000..00......00000...00000000000000000000000000000000000000000000000000",
"00000000..000..00..000..0000..0..00..000..00..00...00..0000000..000..000000000000000000000000000000000000000000000000",
"00000000..0000000..000..000..00..00..0000000..0.0..00......000..000..000000000000000000000000000000000000000000000000",
"00000000..000..00..000..000......00..000..00...00..00..000..00..000..000000000000000000000000000000000000000000000000",
"000000000.....000..000..00..000..000.....000..000..00......00000...00000000000000000000000000000000000000000000000000",
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"00000000..000..00..000..00..000..00.......00.......000000...000......00..000..000000000000000000000000000000000000000",
"000000000..00..00..000..00..00...00.00.00.00..0000000000....00..000..00...0...000000000000000000000000000000000000000",
"0000000000.....000......00..0.0..00000.00000.......0000..0..0000.....00..0.0..000000000000000000000000000000000000000",
"00000000.000..00000000..00...00..00000.00000..00000000..00..000..00..00..000..000000000000000000000000000000000000000",
"000000000....000000000..00..000..00000.00000.......00..000..00..000..00..000..000000000000000000000000000000000000000",
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"00000000..000..00..000..000.....0000.....000......000..000..00000....00.......00..000..00..000..00..000..00..00000000",
"00000000..00...00..000..00.00.00.00..000..00..000..00...0...0000..0..00.00.00.00..00...00..0..0000..00...00..00000000",
"00000000..0.0..00.......00.00.00.00..000..00......000..0.0..000..00..00000.00000..0.0..00....00000..0.0..00..00000000",
"00000000...00..00..000..000.....000..000..00..0000000..000..000......00000.00000...00..00..0..0000...00..000000000000",
"00000000..000..00..000..00000.000000.....000..0000000..000..00..000..00000.00000..000..00..000..00..000..00..00000000",
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" };


int main() {
  std::ios::sync_with_stdio(false);
  std::string mode = "mode con cols=" + std::to_string(C_W) + " lines=" + std::to_string(C_H);
  system(mode.c_str());

  //HANDLE console = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
  HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
  SetConsoleTextAttribute(hStdOut, FOREGROUND_RED | BACKGROUND_BLUE);

  std::mt19937 gen(time(0));

  std::uniform_int_distribution<> range_w(0, C_W - 1);
  std::uniform_int_distribution<> range_i(0, 9);
  std::uniform_int_distribution<> range_c(0, 15);

  auto rnd_i = []() { return rand() % 10; };
  auto rnd_w = std::bind(range_w, gen);
  auto rnd_c = std::bind(range_c, gen);


  auto green_style = [&](COORD pos, WCHAR ch) {
    SetConsoleTextAttribute(hStdOut, FOREGROUND_GREEN);
    SetConsoleCursorPosition(hStdOut, pos);
    std::cout << ch;
  };
  auto rndc_style = [&](COORD pos, WCHAR ch) {
    SetConsoleTextAttribute(hStdOut, rnd_c());
    SetConsoleCursorPosition(hStdOut, pos);
    std::cout << ch;
  };

  auto blank = [&](COORD pos) {
    SetConsoleTextAttribute(hStdOut, 0);
    SetConsoleCursorPosition(hStdOut, pos);
    std::cout << ' ';
  };

  auto sim_fall = [&](COORD& prev) {
    if (mask[prev.Y][prev.X] != '.')
      blank(prev);
    else
      green_style(prev, rnd_i());

    prev.Y += 1;
    green_style(prev, rnd_i());
    if (prev.Y >= (C_H - 1)) prev.Y = 0;
  };

  COORD rain_arr[C_W];
  for (SHORT i = 0; i < C_W; ++i) {
    rain_arr[i] = { i, 0 };
  }


  for (;;) {
    std::this_thread::sleep_for(std::chrono::microseconds(50));
    sim_fall(rain_arr[rnd_w()]);
  }

  SetConsoleTextAttribute(hStdOut, 15);
  return 0;
}
